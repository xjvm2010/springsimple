# day02

	* 요청 맵핑
		
		1. 하나의 요청을 처리하는 방법
			
			형식]
				@RequestMapping("/요청내용")
				
			예 ]
				@RequestMapping("/simple.van")
				==> http://localhost/www/simple.van
				
		2. 여러개의 요청을 하나의 함수에서 처리하는 방법
			
			형식]
				@RequestMapping(path={"/요청내용1", "/요청내용2", ...} )
				
			예]
				@RequestMapping(path={"/memberInfo.van", "/mameberEdit.van"})
				
				==> http://localhost/www/member/memberInfo.van
					http://localhost/www/member/memberEdit.van
		
		3. 요청 방식에 따라서 달라지는 방법
			==> GET방식이냐 POST방식이냐에 따라서 달라지는 경우
			
			형식]
				@RequestMapping(method=RequestMethod.POST)
				
		4. 파라미터 존재 여부에 따라 달라지는 방법
			==> 특정 파라미터가 존재하는 경우에 한해서 해당 함수를 실행하도록 하는 방법
				
			형식 ]
				
				@RequestMapping(params="키값")
				
			예 ]
				@RequestMapping(params="nowPage")
				
			참고 ]
				키값 앞에 ! 를 붙이면 반대의 개념이 (존재하지 않으면) 의 의미가 된다.
				
		5. 여러개의 파라미터의 존재 여부에 따라 달라지는 방법
			형식 ]
				@RequestMapping(params={"키값", "키값",...})
				
			예 ]
				@RequestMapping(params={"orino", "nowPage"})
				
		6. 파라미터의 값이 특정 값인지 검사 해서 실행하는 방법
			
			형식]
				@RequestMapping(params="키값=데이터")
				
			예 ]
				@RequestMapping(params="nowPage=0")
				
				
	위의 여섯가지 방법이 혼합되어서 사용되어진다.
	같이 사용할 경우에는 쉼표(,) 를 사용해서 이어서 나열하면 된다.
	
	예]
		/Board/boardList.van 이라는 요청이
		orino 가 존재하는 경우에만 함수를 실행해주고 싶다.
		
		@RequestMapping("/Board/boardList.van", params="orino")
		
	예]
		/Board/boardList.van 이라는 요청이
		orino 라는 파라미터가 없는 경우에만 실행하도록 하려면
		
		@RequestMapping("/Board/boardList.van", params="!orino")
		
	예]
		/Board/boardWriteProc.van 이라는 요청을
		반드시 포스트 방식으로 처리를 하고 싶다.
		
		@RequestMapping("/Board/boardWriteProc.van", method=RequestMethod.POST)
		
참고 ]
	와일드 카드를 이용한 요청 처리
	==> 여러 요청을 하나의 함수가 실행되도록 하는 방법의 일종
		* 문자를 이용해서 처리하는 방법
		
		형식]
			@RequestMapping("공통요청문자열*")
			
		예]
			@RequestMapping("/Board/board*")
			==> 요청 내용이 /Board/board로 시작하는 모든 요청을 처리하는 방법
			
참고 ]
	
	원칙적으로 요청 내용은 value 라는 속성을 사용해서 처리하는것이 원칙이다.
	
	형식 ]
		@RequestMapping(value="/요청내용")
		
참고]
	스프링은 요청을 매핑하는 단위가 함수이기는 하지만
	클래스 내부의 함수에서 공통적으로 사용되는 요청내용의 일부는
	클래스에 요청매핑을 해서 사용할 수 있다.
	
	예]
	
	@Controller
	@RequestMapping("/member/")
	public class Member {
	
		@RequestMapping("login.van") ==> (클래스의 매핑내용 + 함수의 매핑내용)으로 해석이 된다.
		public ModelAndView loginForm(ModelAndView mv) {} ==> /member/login.van
		
		@RequestMapping("join.van")
		public ModelAndView joinForm(ModelAndView mv) {}
	}
	
===================================================================================

# View 처리
	
	MVC 패턴에서는 컨트롤러의 역할이 끝나면 뷰를 호출한다.
	컨트롤러는 자신이 만든 데이터(Model)를 이용해서 화면을 구성할 뷰를 선택해야 한다.
	
	* 스프링에서 뷰를 선택하는 방법
	
	1. 반환값을 문자열(String)로 지정하는 방법
		==> jsp 프로젝트의 뷰를 부르는 방식과 같다.
		
	2. 반환값을 void로 해서 뷰를 지정하는 방법
		==> 이 경우는 요청내용에 뒤의 확장자는 버리고 .jsp를 붙여서 뷰를 호출하게 된다.
	
	***
	1, 2 번 방식으로 뷰를 부르는 경우에는
	jsp 에서 처리했던 방법 처럼
		req.setAttribute("키값", 데이터);
	으로 데이터를 처리해주면 된다.
	
	***
	3. ModelAndView
		
		ModelAndView 는 자바 클래스로 모델과 뷰를 동시에 지정할 수 있는 특징을 가진 자바클래스이다.
		
		장점 : 만들어진 데이터와 뷰를 한개의 클래스 타입으로 등록해서 사용할 수 있다.
		
	참고 ]
		
		요청매핑이 된 함수의 매개변수
			
			결론적으로 특별한 규칙은 없고
			컨트롤러에서 작업에 필요한 타입이 필요하면
			매개변수에 등록만 해주면 
			스프링이 만들어서 입력해준다.
			
			***
			참고 ]
				스프링은 파라미터를 VO클래스를 이용해서 받을 수 있다.
				
				장점 ]
					파라미터가 많은 경우 일반적으로 req 로 받으면
					코딩 내용이 길어지고 함수의 내용이 복잡해진다.
					req 대신 VO 타입으로 받게 된다면
					변수 하나로 받을 수 있게 되므로
					코드의 길이가 훨씬 간결해진다.
					이때 VO 클래스의 변수에 데이터가 채워지는데
					변수에 직접 접근해서 채워지는 것이 아니고
					setXXX() 가 자동 호출이 되서 해당 변수에 채워지게 된다.
					
				방법 ]
					1. 파라미터를 받을 수 있는 VO 클래스를 제작한다.
						이때 VO 클래스 안에는 반드시
							setXXX(), getXXX()
						함수가 존재해야 한다.
						
					2. 매개변수에 VO 클래스를 등록만 해주면 
						스프링이 알아서 파라미터를 받아준다.
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
