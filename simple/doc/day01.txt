--- Spring Day01 ----

# 처음 셋팅
0. maven 을 다운받아서 적당한 폴더에 압축을 해제하고
   환경변수를 설정해준다.
   ==> mvn -version
   	명령을 cmd 창에서 입력하고 버젼이 출력되는지 확인한다.

1. 작업을 진행 폴더를 만든다.
	
	D:\spring	- source	-- workspace 용도의 폴더
			- doc		-- 문서를 저장할 폴더
			- app		-- eclipse 압축파일, ojdbc6.jar 을 복사

2. 이클립스를 압축해제하고 실행한다.
	==> workspace 는 위에서 만든 source 폴더로 한다.

3. 인코딩설정부터 해놓는다.

4. 이클립스 마켓플레이스에서 sts 로 검색을 해서
	Spring Tools 3 (Standalone Edition)
   을 찾아서 설치한다.

5. 선택창에서 cirnfirm 버튼을 누르고
	라이센스 수락 창에서 수락하는 라디오버튼 체크
   해주고 설치 진행

6. 파일 ==> new ==> spring ==> spring lagacy project
	로 프로젝트를 추가해준다.

	spring mvc project 를 선택하고 프로젝트 생성을 진행한다.

	프로젝트 이름은 도메인을 거꾸로 적는 방법으로 처리한다.
		==> 우리 수업의 경우
			com.simple.www

7. 프로젝트의 메뉴에 가서
	properties ==> java Build path 에서 자바 버젼을 확인해준다.

			project facets 메뉴에서 웹모듈버젼과 자바버젼을 셋팅해준다.
8. 톰캣 서버를 추가해준다.

9. 프로젝트 메뉴에서 Properties 메뉴를 선택하고
	project factes 메뉴를 선택하고
	오른쪽 메뉴에서 runtimes 탭을 선택하고
	tomcat 을 체크해준다.

10. 서버의 설정파일들을 확인해준다.
	server.xml, web.xml

11. pom.xml 파일을 열어서
	필요한 라이브러리의 버젼을 설정한다.

12. 프로젝트의 메뉴에서 Maven ==> update project 메뉴를 선택해서 실행한다.

===============================================================================

Spring

	==> MVC 패턴을 기반으로 하는 웹 프로그램 개발을 위해서
	    좀 더 다양한 기능을 제공하기 위한 프레임워크의 일종이다.
	    
	    JSP 로 만드는 엔터프라이즈급 프로젝트를 
	    편한게 진행할 수 있도록 만들어 놓은 프레임워크

	    이제까지 우리가 만들었던 JSP 프로젝트는
	    직접 "디스패치 서블릿"을 만들고
	    작업을 진행했지만
	    스프링에서는 직접 만들 필요없이 스프링자체에 이미 구현되어 있는 
	    디스패치 서블릿을 사용하면 된다.

	    전자정부 3.0 에서 지원하는 프레임워크이다.
		==> 정부 주도의 프로젝트를 진행하려면 반드시 스프링을 사용해야 한다.

	
	특징 ]
		1. 요청에 대한 매핑이 컨트롤러 단위가 아니고 함수단위이다.
			==> 이제까지는 하나의 요청이 생기면 
			    요청에 대한 매핑을 할 자바 클래스를 만들고 
			    그 클래스에 요청에 대한 매핑을 했다.
			    요청이 생길때마다 클래스 하나가 제작이 되어야 한다.

			    하지만 스프링에서는 컨트롤러 클래스는 하나만 만들어 놓고
			    내부에 함수를 제작해서 매핑을 하는 방식을 사용하기 때문에
			    이미 제작한 클래스에 함수만 추가하면 된다.

			    하나의 클래스 안에 여러개의 함수를 만든다는 것은
			    각각의 함수의 공통적인 기능이 존재하고
			    세부기능이 달라진다는 이야기이므로
			    공통적인 것을 같이 이용할 수 있다.
		
		***
		2. 빈(Bean) 처리를 할 수 있다.
		   사용할 클래스를 한곳에 모아서 new 처리를 할 수 있다.

		   ==> 소스 관리가 간편해진다.

		*****
		3. DI  기법을 이용할 수 있다.
			==> 우리말로 번역을 하자면 느슨한 주입이라고 번역할 수 있으며
			    빈 처리에서 new 시킨 클래스를 자동적으로 사용하는 기법
		
		*****
		4. AOP 기법을 사용할 수 있다.
			==> 우리말로 의역을 하자면 "전처리 클래스" 라고 할 수 있다.
			    특정 작업이 실행되는 순간 필요한 다른 작업을 우선 처리하는 기법

=============================================================================================

이클립스에서 스프링 프로젝트 제작 방법
	
	1. ADT 방식
		==> 이클립스 자체를 처음부터 스프링 프로젝트에 맞도록 만들어 놓고
		    필요한 라이브러리를 하나씩 복사해서 프로젝트를 진행하는 방법

	2. Maven 방식
		==> 이클립스 자체는 원 상태로 유지하고
		    Maven 서버를 이용해서 필요한 라이브러리를 자동으로 불러와서 사용하는 방법

	==> 우리는 메이븐 방식을 사용해서 처리하기로 한다.
	    단점 ] 
	    		네트워크가 항상 개설이 되어있어야 한다.

================================================================================================

참고 ]
	Maven 방식
		자동적으로 필요한 라이브러리를 설치하도록 하는 방식

		이때 필요한 라이브러리는 pom.xml 파일에 등록을 하면
		Maven 서버에서 자동으로 해당 사이트에 접속을 해서
		해당 라이브러리를 받아서 설치를 하게 된다.

		따라서 필요한 라이브러리가 있다면
		pom.xml 파일에 등록을 해주면 된다.

참고 ]
	Maven 방식은 원칙적으로 필요한 라이브러리를 
	해당 사이트(mvnrepsitory.com)에 자동 접속을 해서 다운받아서 설치를 해준다.
	따라서 처리 속도가 늦는 경향이 있다.

	이런 경우를 대비해서 Maven 해당 클라이언트의
	시스템 안에 필요한 라이브러리를 저장해 놓고
	필요하면 사이트에 접속을 하지 않고 사용하도록 해준다.

	
	단점 ]
		일단 필요한 라이브러리가 내 컴퓨터에 없으면 
		해당 사이트에 접속을 해서
		라이브러리를 다운 받은 후 프로젝트에 적용을 시킨다.

		이때 다운로드가 불완전하게 이루어진 경우에도
		메이븐은 해당 라이브러리가 이미 저장되어 있는 것으로 인식해서
		다시 다운받지 않는다.
		이때는 문제가 계속 발생하게 된다.

		따라서 이때는 이미 다운 받은 라이브러리를 강제로 삭제하고
		다시 다운 받아서 처리를 하면 된다.

=================================================================================

폴더의 구조
	
	src------------- main	: 실제 기능을 구현하는 폴더
		|
		-------- test	: 테스트 목적으로 사용되는 폴더

	
	참고]

	src
		main
			
			java	---> 자바 파일이 위치하는 곳
			...
			webapp
			==> 이곳에 jsp 파일을 만들 수 있다.
			    (jsp 문서를 직접 호출하는 경우 위치)

				WEB-INF
					views
						==> JSP 파일이 위치하는 곳 : 
						    (컨트롤러가 호출하는 jsp)

